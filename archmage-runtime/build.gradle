import com.google.common.hash.Hashing
import com.google.common.io.Files

apply plugin: 'com.android.library'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion


    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

//archmage-runtime involved in 'manual' compile export packages as classpath,
//so declare dependencies as less as possible
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile rootProject.ext.dep.supportV4
}

ext {
    VERSION_NAME = '1.0.0'
    GROUP = 'com.mricefox.archmage.runtime'

    POM_DESCRIPTION = 'Archmage runtime sdk.'
    POM_NAME = 'Archmage runtime sdk'
    POM_ARTIFACT_ID = 'archmage-runtime'
    POM_PACKAGING = 'aar'

    BINTRAY_NAME = POM_ARTIFACT_ID
    BINTRAY_DESCRIPTION = POM_DESCRIPTION
}

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')

//Integrate archmage-runtime.jar and all of its dependencies jar into one bundle.jar
//The bundle.jar publish to jcenter/maven which is used to compile classes file in export packages 'manually'
afterEvaluate {
    File artifactsDir = new File("${buildDir}/intermediates/archiveJar", 'artifacts')
    delete(artifactsDir)
    artifactsDir.mkdirs()

    File classesDir = new File("${buildDir}/intermediates/archiveJar", 'classes')
    delete(classesDir)
    classesDir.mkdirs()

    def allArtifacts = []
    allArtifacts.addAll(configurations.compile.files)
    allArtifacts.addAll(android.bootClasspath)

    //Collect archmage-runtime's jar dependencies
    task copyJar(type: Copy) {
        from allArtifacts.findAll { it.toString().endsWith('.jar') }.collect()
        eachFile { FileCopyDetails fcd ->
            fcd.name = Hashing.md5().hashBytes(Files.toByteArray(fcd.file)).toString() + '.jar'
        }
        into artifactsDir
    }

    //Extra jar from archmage-runtime's aar dependencies
    task unzipJarFromAar(type: Copy) {
        from allArtifacts.findAll { it.toString().endsWith('.aar') }.collect {
            zipTree(it)
        }

        include 'classes.jar'
        eachFile { FileCopyDetails fcd ->
            fcd.name = Hashing.md5().hashBytes(Files.toByteArray(fcd.file)).toString() + '.jar'
        }
        into artifactsDir
    }

    //Compile .class files of archmage-runtime with jars above
    task genArchmageRuntimeClasses(dependsOn: [copyJar, unzipJarFromAar], type: JavaCompile) {
        source = android.sourceSets.main.java.source

        classpath = fileTree(artifactsDir)
        destinationDir = classesDir
        sourceCompatibility = JavaVersion.VERSION_1_7
        targetCompatibility = JavaVersion.VERSION_1_7
        options.incremental = false
    }

    //Unzip all dependency jars .class files
    task genDependenciesClasses(dependsOn: [copyJar, unzipJarFromAar], type: Copy) {
        from({
            artifactsDir.listFiles().collect { zipTree(it) }
        })
        into classesDir
        includeEmptyDirs = false
        def entries = []

        eachFile { FileCopyDetails fcd ->
            def entry = fcd.relativePath.pathString
            if (entry != 'META-INF/MANIFEST.MF' && entries.contains(entry)) {
                throw new GradleException('Dunplicate entry:' + entry)
            } else {
                entries << fcd.relativePath.pathString
            }
            if (!fcd.file.name.endsWith('.class')) {
                fcd.exclude()
            }
        }
    }

    //Integrate archmage-runtime's .class and its dependencies .class into one bundle.jar
    task archiveBundleJar(dependsOn: [genArchmageRuntimeClasses, genDependenciesClasses], type: Jar) {
        archiveName = "archmage-runtime-bundle-${VERSION_NAME}.jar"
        classifier = 'bundle'
        from classesDir
    }

    artifacts {
        archives archiveBundleJar
    }
}
